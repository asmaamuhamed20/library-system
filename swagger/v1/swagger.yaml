openapi: 3.0.1
info:
  title: Library System API
  description: API documentation for the Library System.
  version: 1.0.0
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        published_date:
          type: string
          format: date
        description:
          type: string
        category_ids:
          type: array
          items:
            type: integer
    UpdateBook:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        published_date:
          type: string
          format: date
        description:
          type: string
        category_ids:
          type: array
          items:
            type: integer
    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string

paths:
  /api/v1/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "exampleUser"
                password:
                  type: string
                  example: "password123"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
              required:
                - username
                - password
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /api/v1/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "asmaa@gmail.com"
                password:
                  type: string
                  format: password
                  example: "1234567890"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "JWT token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "User ID"
                      username:
                        type: string
                        description: "Username"
                      email:
                        type: string
                        description: "Email address"
        '401':
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
                    
  /api/v1/users:
    get:
      tags:
        - Users
      summary: List all users
      description: Retrieve a list of all users.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve.
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Details of the specified user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        '404':
          description: User not found.
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

    patch:
      tags:
        - Users
      summary: Update a user by ID
      description: Updates a user's details. Only admins can update user details.
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
        - name: Authorization
          in: header
          required: true
          description: JWT token for authorization
          schema:
            type: string
            format: bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "newUsername"
                    email:
                      type: string
                      format: email
                      example: "newemail@example.com"
                    role:
                      type: string
                      enum: [member, admin]
                      example: "admin"
              required:
                - user
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        '400':
          description: Invalid request data.
        '404':
          description: User not found.
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Delete a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

  /api/v1/categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Science Fiction"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Science Fiction"
              required:
                - name
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Science Fiction"
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /api/v1/categories/{id}:
    get:
      summary: Get a category by ID
      tags:
        - Categories
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Science Fiction"
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found"
        '401':
          description: Unauthorized access

    patch:
      summary: Update a category by ID
      tags:
        - Categories
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Science Fiction"
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Science Fiction"
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found"
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized access

    delete:
      summary: Delete a category by ID
      tags:
        - Categories
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found"
        '401':
          description: Unauthorized access

  /api/v1/books:
    get:
      summary: Get all books
      tags:
        - Books
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Filter by book title
        - in: query
          name: author
          schema:
            type: string
          description: Filter by author
        - in: query
          name: category_id
          schema:
            type: integer
          description: Filter by category ID
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized access

    post:
      summary: Create a new book
      tags:
        - Books
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'

  /api/v1/books/{id}:
    get:
      summary: Get a book by ID
      tags:
        - Books
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the book
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"
        '401':
          description: Unauthorized access

    patch:
      summary: Update a book by ID
      tags:
        - Books
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized access

    delete:
      summary: Delete a book by ID
      tags:
        - Books
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the book
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Book not found"
        '401':
          description: Unauthorized access

  /api/v1/borrowings:
    post:
      tags:
        - Borrowings
      summary: Create a new borrowing
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                book_id:
                  type: integer
                borrowed_at:
                  type: string
                  format: date
                due_date:
                  type: string
                  format: date
                returned_at:
                  type: string
                  format: date
      responses:
        '201':

          description: Borrowing created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/borrowings/{id}:
    patch:
      tags:
        - Borrowings
      summary: Update a borrowing record by ID
      description: Updates details of a specific borrowing record.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the borrowing record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                due_date:
                  type: string
                  format: date
                  example: "2024-09-01"
              required:
                - due_date
      responses:
        '200':
          description: Borrowing record updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Borrowing record updated successfully"
        '404':
          description: Borrowing record not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Borrowing record not found"
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized access

    delete:
      tags:
        - Borrowings
      summary: Delete a borrowing record by ID
      description: Deletes a specific borrowing record by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the borrowing record to delete
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: Borrowing record deleted successfully
        '404':
          description: Borrowing record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/reviews:
    get:
      tags:
        - Reviews
      summary: Get a list of all reviews
      operationId: getReviews
      responses:
        '200':
          description: A list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      tags:
        - Reviews
      security:
         - JWTAuth: []
      summary: Create a new review
      operationId: createReview
      requestBody:
        required: true
        content:
         application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'  
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  api/v1/reviews/{id}:
    get:
      tags:
        - Reviews
      summary: Get a review by ID
      operationId: getReviewById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Review details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Reviews
      security:
         - JWTAuth: []
      summary: Update a review by ID
      operationId: updateReview
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/ReviewInput'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
    delete:
      tags:
        - Reviews
      security:
        - JWTAuth: []
      summary: Delete a review by ID
      operationId: deleteReview
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Review deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        description:
          type: string
        published_date:
          type: string
          format: date
        categories:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Borrowing:
      type: object
      properties:
        id:
          type: integer
        book_id:
          type: integer
        user_id:
          type: integer
        borrowed_at:
          type: string
          format: date
        due_date:
          type: string
          format: date
        returned_at:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Review:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        book_id:
          type: integer
        rating:
          type: integer
          example: 4
        comment:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ReviewInput:
      type: object
      required:
        - book_id
        - rating
      properties:
        book_id:
          type: integer
        rating:
          type: integer
          example: 4
        comment:
          type: string

    Errors:
      type: object
      properties:
        error:
          type: string
    Auth:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
    Error:
      type: object
      properties:
        message:
          type: string
        details:
          type: string
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    