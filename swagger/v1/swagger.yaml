openapi: 3.0.1
info:
  title: Library System API
  description: API documentation for the Library System.
  version: 1.0.0
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        description:
          type: string
        published_date:
          type: string
          format: date
        categories:
          type: array
          items:
            type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Borrowing:
      type: object
      properties:
        id:
          type: integer
        book_id:
          type: integer
        user_id:
          type: integer
        borrow_date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        returned_at:
          type: string
          format: date
    Error:
      type: object
      properties:
        error:
          type: string
        errors:
          type: array
          items:
            type: string

paths:
  /api/v1/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Registers a new user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "asmaa"
                email:
                  type: string
                  format: email
                  example: "asmaa@gmail.com"
                password:
                  type: string
                  example: "1234567890"
                password_confirmation:
                  type: string
                  example: "1234567890"
              required:
                - username
                - email
                - password
                - password_confirmation
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "asmaa@gmail.com"
                password:
                  type: string
                  example: "1234567890"
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users:
    get:
      tags:
        - Users
      summary: List all users
      description: Retrieve a list of all users.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Details of the specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Users
      summary: Update a user by ID
      description: Updates a user's details. Only admins can update user details.
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newUsername"
                email:
                  type: string
                  format: email
                  example: "newemail@example.com"
                role:
                  type: string
                  enum: [member, admin]
                  example: "admin"
              required:
                - username
                - email
                - role
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Delete a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/books:
    get:
      tags:
        - Books
      summary: List all books
      description: Retrieve a list of all books.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Books
      summary: Create a new book
      description: Create a new book entry.
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "The Great Gatsby"
                author:
                  type: string
                  example: "F. Scott Fitzgerald"
                isbn:
                  type: string
                  example: "9780743273565"
                description:
                  type: string
                  example: "A novel set in the Roaring Twenties."
                published_date:
                  type: string
                  format: date
                  example: "1925-04-10"
                categories:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/books/{id}:
    get:
      tags:
        - Books
      summary: Retrieve a book by ID
      description: Retrieve a specific book by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the book to retrieve
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Details of the specified book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Books
      summary: Update a book by ID
      description: Updates details of a specific book.
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the book to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                isbn:
                  type: string
                description:
                  type: string
                published_date:
                  type: string
                  format: date
                categories:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Books
      summary: Delete a book by ID
      description: Deletes a specific book by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the book to delete
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/categories:
    get:
      tags:
        - Categories
      summary: List all categories
      description: Retrieve a list of all categories.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Categories
      summary: Create a new category
      description: Create a new category entry.
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Fiction"
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/categories/{id}:
    get:
      tags:
        - Categories
      summary: Retrieve a category by ID
      description: Retrieve a specific category by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to retrieve
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Details of the specified category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Categories
      summary: Update a category by ID
      description: Updates a specific category.
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Categories
      summary: Delete a category by ID
      description: Deletes a specific category by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to delete
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/borrowings:
    post:
      tags:
        - Borrowings
      summary: Create a new borrowing
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                book_id:
                  type: integer
                borrowed_at:
                  type: string
                  format: date
                due_date:
                  type: string
                  format: date
                returned_at:
                  type: string
                  format: date
      responses:
        '201':
          description: Borrowing created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/borrowings/{id}:
    patch:
      tags:
        - Borrowings
      summary: Update a borrowing record by ID
      description: Updates details of a specific borrowing record.
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the borrowing record to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                returned_at:
                  type: string
                  format: date
                  example: "2024-08-10"
      responses:
        '200':
          description: Borrowing record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Borrowing'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Borrowing record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Borrowings
      summary: Delete a borrowing record by ID
      description: Deletes a specific borrowing record by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the borrowing record to delete
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: Borrowing record deleted successfully
        '404':
          description: Borrowing record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        description:
          type: string
        published_date:
          type: string
          format: date
        categories:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Borrowing:
      type: object
      properties:
        id:
          type: integer
        book_id:
          type: integer
        user_id:
          type: integer
        borrowed_at:
          type: string
          format: date
        due_date:
          type: string
          format: date
        returned_at:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Auth:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
    Error:
      type: object
      properties:
        message:
          type: string
        details:
          type: string
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
