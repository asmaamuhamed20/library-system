openapi: 3.0.1
info:
  title: Library System API
  version: v1
  description: API documentation for the Library System
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  - url: 'http://localhost:3000'
    description: Local server
paths:
  /api/v1/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "exampleUser"
                password:
                  type: string
                  example: "password123"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
              required:
                - username
                - password
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Username can't be blank", "Password can't be blank", "Email can't be blank"]

  /api/v1/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "JWT token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: "User ID"
                      username:
                        type: string
                        description: "Username"
                      email:
                        type: string
                        description: "Email address"
        '401':
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
  /api/v1/users:
    get:
      tags:
        - Users
      summary: List all users
      description: Retrieve a list of all users.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve.
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Details of the specified user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        '404':
          description: User not found.
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

    patch:
      tags:
        - Users
      summary: Update a user by ID
      description: Updates a user's details. Only admins can update user details.
      security:
        - JWTAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
        - name: Authorization
          in: header
          required: true
          description: JWT token for authorization
          schema:
            type: string
            format: bearer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "newUsername"
                    email:
                      type: string
                      format: email
                      example: "newemail@example.com"
                    role:
                      type: string
                      enum: [member, admin]
                      example: "admin"
              required:
                - user
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
        '400':
          description: Invalid request data.
        '404':
          description: User not found.
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Delete a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: integer
      security:
        - JWTAuth: []
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
        '401':
          description: Unauthorized access
        '403':
          description: Forbidden access
          

  /api/v1/categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Science Fiction"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Science Fiction"
              required:
                - name
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Science Fiction"
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Name can't be blank"]

  /api/v1/categories/{id}:
    get:
      summary: Get a category by ID
      tags:
        - Categories
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Science Fiction"
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

    patch:
      summary: Update a category by ID
      tags:
        - Categories
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Category Name"
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Updated Category Name"
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found"
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Name can't be blank"]
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"

    delete:
      summary: Delete a category by ID
      tags:
        - Categories
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category
      responses:
        '204':
          description: No content, category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Category not found"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"